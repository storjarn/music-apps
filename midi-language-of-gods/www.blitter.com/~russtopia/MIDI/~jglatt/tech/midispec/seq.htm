<HTML><HEAD><TITLE>MIDI Specification: Syncing Sequence Playback</TITLE></HEAD><BODY TEXT=BLACK BGCOLOR=WHITE LINK=RED VLINK=PURPLE ALINK=PURPLE><FONT SIZE=4>

<H2><FONT COLOR=GREEN><CENTER>Syncing Sequence Playback</CENTER></FONT></H2>

<P>A sequencer is a software program or hardware unit that "plays" a musical performance complete with appropriate
rhythmic and melodic inflections (ie, plays musical notes in the context of a musical beat).

<P>Often, it's necessary to synchronize a sequencer to some other device that is controlling a timed playback, such as a
drum box playing its internal rhythm patterns, so that both play at the same instant and the same tempo. Several MIDI
messages are used to cue devices to start playback at a certain point in the sequence, make sure that the devices start
simultaneously, and then keep the devices in sync until they are simultaneously stopped. One device, the master, sends
these messages to the other device, the slave. The slave references its playback to these messages.

<P>The message that controls the playback rate (ie, ultimately tempo) is MIDI Clock. This is sent by the master at a rate
dependent upon the master's tempo. Specifically, the master sends 24 MIDI Clocks, spaced at equal intervals, during every
quarter note interval.(12 MIDI Clocks are in an eighth note, 6 MIDI Clocks in a 16th, etc). Therefore, when a slave device
counts down the receipt of 24 MIDI Clock messages, it knows that one quarter note has passed. When the slave counts off
another 24 MIDI Clock messages, it knows that another quarter note has passed.

<P>For example, if a master is set at a tempo of 120 BPM (ie, there are 120 quarter notes in every minute), the master sends
a MIDI clock every 20833 microseconds. (ie, There are 1,000,000 microseconds in a second. Therefore, there are
60,000,000 microseconds in a minute. At a tempo of 120 BPM, there are 120 quarter notes per minute. There are 24 MIDI
clocks in each quarter note. Therefore, there should be 24 * 120 MIDI Clocks per minute. So, each MIDI Clock is sent
at a rate of 60,000,000/(24 * 120) microseconds).

<P>Alternately, if a sequencer wishes to control playback independent of tempo, it can use Tick messages. These are sent
at a rate of 1 message every 10 milliseconds. Of course, it is then up to the slave device to maintain and update its
clock based upon these messages. The slave will be doing its own counting off of how many milliseconds are
supposed to be in each "beat" at the current tempo.

<P>The master needs to be able to start the slave precisely when the master starts.  The master does this by sending a MIDI
Start message. The MIDI Start message alerts the slave that, upon receipt of the very next MIDI Clock message, the slave
should start the playback of its sequence. In other words, the MIDI Start puts the slave in "play mode", and the receipt of
that first MIDI Clock marks the initial downbeat of the song (ie, <B>MIDI Beat</B> 0). What this means is that (typically)
the master sends out that MIDI Clock "downbeat" <U>immediately</U> after the MIDI Start. (In practice, most masters
allow a 1 millisecond interval inbetween the MIDI Start and subsequent MIDI Clock messages in order to give the slave an
opportunity to prepare itself for playback). In essense, a MIDI Start is just a warning to let the slave know that the next MIDI
Clock represents the downbeat, and playback is to start then. Of course, the slave then begins counting off subsequent
MIDI Clock messages, with every 6th being a passing 16th note, every 12th being a passing eighth note, and every 24th
being a passing quarter note.

<P>A master stops the slave simultaneously by sending a MIDI Stop message. The master may then continue to send MIDI
Clocks at the rate of its tempo, but the slave should ignore these, and not advance its "song position". Of course, the slave
may use these continuing MIDI Clocks to ascertain what the master's tempo is at all times.

<P>Sometimes, a musician will want to start the playback point somewhere other than at the beginning of a song (ie, he may
be recording an overdub in a certain part of the song). The master needs to tell the slave what beat to cue playback to. The
master does this by sending a Song Position Pointer message. The 2 data bytes in a Song Position Pointer are a 14-bit
value that determines the <B>MIDI Beat</B> upon which to start playback. Sequences are always assumed to start on a
MIDI Beat of 0 (ie, the downbeat). Each MIDI Beat spans 6 <B>MIDI Clocks</B>. In other words, each MIDI Beat is a
16th note (since there are 24 MIDI Clocks in a quarter note, therefore 4 MIDI Beats also fit in a quarter). So, a master can
sync playback to a resolution of any particular 16th note.

<P>For example, if a Song Position value of 8 is received, then a slave should cue playback to the third quarter note of the
song. (8 MIDI beats * 6 MIDI clocks per MIDI beat = 48 MIDI Clocks. Since there are 24 MIDI Clocks in a quarter note, the
first quarter occurs on a time of 0 MIDI Clocks, the second quarter note occurs upon the 24th MIDI Clock, and the third
quarter note occurs on the 48th MIDI Clock).

<P>A Song Position Pointer message should not be sent while the devices are in play. This message should only be sent
while devices are stopped. Otherwise, a slave might take too long to cue its new start point and miss a MIDI Clock that it
should be processing.

<P>A MIDI Start always begins playback at MIDI Beat 0 (ie, the very beginning of the song). So, when a slave receives a MIDI
Start, it automatically resets its "Song Position" to 0. If the master needs to start playback at some other point (as set by a
Song Position Pointer message), then a MIDI Continue message is sent <U>instead</U> of MIDI Start. Like a MIDI Start,
the MIDI Continue is immediately followed by a MIDI Clock "downbeat" in order to start playback then. The only difference
with MIDI Continue is that this downbeat won't necessarily be the very start of the song. The downbeat will be at whichever
point the playback was set via a Song Position Pointer message or at the point when a MIDI Stop message was sent
(whichever message last occurred). What this implies is that a slave must always remember its "current song position" in
terms of MIDI Beats. The slave should keep track of the nearest previous MIDI beat at which it stopped playback (ie, its
stopped "Song Position"), in the anticipation that a MIDI Continue might be received next.

<P>Some playback devices have the capability of containing several sequences. These are usually numbered from 0 to
however many sequences there are. If 2 such devices are synced, a musician typically may set up the sequences on each
to match the other. For example, if the master is a sequencer with a reggae bass line for sequence 0, then a slaved drum
box might have a reggae drum beat for sequence 0. The musician can then select the same sequence number on both
devices simultaneously by having the master send a Song Select message whenever the musician selects that sequence
on the master. When a slave receives a Song Select message, it should cue the new song at MIDI Beat 0 (ie, reset its
"song position" to 0). The master should also assume that the newly selected song will start from beat 0. Of course, the
master could send a subsequent Song Position Pointer message (after the Song Select) to cue the slave to a different MIDI
Beat.

<P>If a slave receives MIDI Start or MIDI Continue messages while it's in play, it should ignore those messages. Likewise,
if it receives MIDI Stop messages while stopped, it ignores those.

</FONT></BODY></HTML>